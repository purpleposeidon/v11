#![macro_use]


/**
This macro generates a column-based data table.

The simplified syntax for this macro is:

```ignored
table! {
    pub name_of_table {
        column_name: [element_type; ColumnType<element_type>],
    }
    mod {
        use path::to::element_type;
    }
}
```

This actual macro just includes the module generated by your `build.rs` script. See
`v11_test/build.rs` & `v11_test/Cargo.toml` for an example of how to set this up. (It's super-easy.)

Table and column names must be valid Rust identifiers, and must match the regex
"[A-Za-z][A-Za-z_0-9]*".

Column elements must implement `Storable`.
Column types must implement `TCol`.

# Advanced Usage

The advanced syntax for this macro is:

```ignored
table! {
    pub name_of_table {
        column_name: [element_type; ColumnType<element_type>],
    }
    impl {
        some_special_setting;
    }
    mod {
        // user code that gets copied to the end of the table.rs
        // Perhaps we could have something like...
        impl<'u> Read<'u> {
            fn read_me(self) {}
        }
    }
}
```
The `impl` and `mod` sections are both optional, but must be given in that order.
The leading `pub` may be elided to make the module private.

# `RowId = some_primitive;`
Sets what the (underlying) primitive is used for indexing the table. The default is `usize`.
This is useful for foreign keys.

# `NoDebug;`
`#[derive(Debug)]` is added to `Row` by default.

# `TrackRm;`
(FIXME: nyi)
Keep track of which rows have been removed by `filter` and `visit`.

# `ForeignCascade;`
(FIXME: nyi)
If a foreign key to a table that has `TrackRm` becomes invalidated by removing the refered to row,
then that row (on this table) will be removed by calling (FIXME: some function).

# `TrackModify;`
(FIXME: nyi. Also tricky.)
Keeps a sparse list of modified rows.

# `SortBy(SomeColumnName);`
(FIXME: nyi)
Sorts the table by that column.

# `FreeList;`
(FIXME: nyi. Also tricky.)
Allow marking rows as dead, and pushing new rows will pick a dead row.

# `Encode(method);` and `Decode(method);`
(FIXME: Serde nyi)
method can be `Serde` or `Rustc`. Adds methods for encoding or decoding the table.

# `Static;`
Marks the table as being something that is only modified once.

 **/
#[macro_export]
macro_rules! table {
    (pub $name:ident $($args:tt)*) => {
        pub mod $name {
            include!(concat!(
                env!("OUT_DIR"),
                "/v11_generated_tables/",
                stringify!($name),
                ".rs",
            ));
        }
    };
    ($name:ident $($args:tt)*) => {
        mod $name {
            include!(concat!(
                env!("OUT_DIR"),
                "/v11_generated_tables/",
                stringify!($name),
                ".rs",
            ));
        }
    };
}
