diff --git a/v11_macros/src/lib.rs b/v11_macros/src/lib.rs
index ca4df51..3dd24d2 100644
--- a/v11_macros/src/lib.rs
+++ b/v11_macros/src/lib.rs
@@ -1,5 +1,8 @@
 #![recursion_limit = "1024"] // quote :D
 
+#[macro_use]
+extern crate procedural_masquerade;
+extern crate proc_macro;
 extern crate syntex;
 extern crate syntex_syntax;
 #[macro_use]
@@ -17,56 +20,25 @@ mod table;
 mod output;
 mod expander;
 
-/// Generate the table code for the given crate. The typical build script calls this.
-pub fn process_crate(crate_name: &str, run_rust_format: bool) {
-    let out_dir = ::std::env::var("OUT_DIR").unwrap();
-    let dst = Path::new(&out_dir).join("v11_generated_tables");
-    process(crate_name, &Path::new("src/"), &dst, run_rust_format);
-}
-
-/// Add the table expander to an existing `syntex::Registry`.
-pub fn add_expander<P: AsRef<Path>>(registry: &mut syntex::Registry, output: P, run_rust_format: bool) {
-    let expander = expander::TableExpander::new(output, run_rust_format);
-    registry.add_macro("table", expander);
-}
-
-/// Recursively process each Rust source file in the input directory,
-/// writing any table module definitions to the output directory.
-pub fn process(crate_name: &str, input: &Path, output: &Path, run_rust_format: bool) {
-    // We can't use `cargo:rerun-if-changed` because a new table could
-    // be defined anywhere.
-    assert!(input.is_dir(), "Input path is not a directory: {:?}", input);
-    let tmp = TmpFile::new();
-    let dot_rs = Some(OsStr::new("rs"));
-    // FIXME: temp file, remove? Hmm.
-    // Kinda wasteful.
-    for entry in WalkDir::new(input).into_iter().filter_map(Result::ok) {
-        if !entry.file_type().is_file() { continue; }
-        let source = entry.path();
-        if source.extension() != dot_rs { continue; }
-        let mut registry = syntex::Registry::new();
-        add_expander(&mut registry, output, run_rust_format);
-        registry.expand(crate_name, source, &tmp.path).ok();
+define_proc_macros! {
+    #[allow(non_snake_case)]
+    pub fn __v11_internal_table(input: &str) -> String {
+        println!("====");
+        println!("{}", input);
+        println!("====");
+
+        use syntex_syntax::parse::ParseSess;
+        use syntex_syntax::parse::parser::Parser;
+        let mut sess = ParseSess::new();
+        let reader = Box::new();
+        let parser = Parser::new(&mut sess, reader, None /* directory */, true /* desugar doc */);
+
+        "pub mod asdf { pub const HI: i8 = 42; }".to_owned()
+        //format!("pub mod {} {{ pub const HI: i8 = 42; }}", input)
     }
 }
 
 
-struct TmpFile {
-    path: PathBuf,
-}
-impl TmpFile {
-    fn new() -> Self {
-        let path = ::std::env::temp_dir().join("v11_build_null");
-        TmpFile {
-            path: path,
-        }
-    }
-}
-impl Drop for TmpFile {
-    fn drop(&mut self) {
-        ::std::fs::remove_file(&self.path).ok();
-    }
-}
 
 
 
